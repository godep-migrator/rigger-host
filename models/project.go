package models

import (
	"github.com/rigger-dot-io/rigger-host/utils"
)

// Projects are the top-level building blocks in Rigger. A Project represents
// a continuous integration / delivery pipeline consisting of different stages
// across multiple environments.
type Project struct {
	// Unique Id generated by the system on creation
	Id int64

	// Owner of project
	Owner string

	// Name of project, unique to an owner
	Name string

	// Where the repository is being hosted. E.g.: Github, Bitbucket, Gitlab etc
	Host string

	// Whether the project is disabled or not
	Disabled bool

	// Source Control type, i.e.: Git, Mercurial
	SCM string

	// URL of the repo, e.g.: git://github.com/rigger-dot-io/rigger-host
	URL string

	// RSA keys generated when the project is created.
	DeployKeyPrivate string
	DeployKeyPublic  string

	// Main programming language of project if there's any
	Language string
}

// Returns a new project ready to be used
func NewProject(name, owner, host, scm, url string) (*Project, error) {
	project := Project{}

	project.Name = name
	project.Owner = owner
	project.Host = host
	project.SCM = scm
	project.URL = url
	project.Disabled = false
	project.Language = "n/a"

	key, err := utils.GenerateDeployKey()
	if err != nil {
		return nil, err
	}

	project.DeployKeyPrivate = utils.MarshalPrivateKey(key)
	project.DeployKeyPublic = utils.MarshalPublicKey(&key.PublicKey)

	return &project, nil
}
